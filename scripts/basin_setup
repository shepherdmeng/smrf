#!/usr/bin/env python
import shapefile
import argparse
import requests
import zipfile
import StringIO
import os
import threading
from subprocess import Popen, check_output


def download_zipped_url(url):
    """
    Downloads a url that is expected to be a zipped folder.
    """

    r = requests.get(url, stream=True)
    z = zipfile.ZipFile(StringIO.StringIO(r.content))
    z.extractall('~/Downloads')

#Parge command line arguments
p = argparse.ArgumentParser(description='Setup a new basin for SMRF. Creates all the required files.')

p.add_argument('-f','--basin_shapefile', dest='basin_shapefile',required=True,
                help="Path to shapefile that defines the basin")

p.add_argument('-c','--cell_size', dest='cell_size',required=False, default=50,
                help="Pixel size to use for the basin in meters")

p.add_argument('-dm','--dem', dest='dem',required=True,
                help="DEM file in geotiff")


p.add_argument('-lf','--landfire', dest='landfire',required=False, action="store_true",
                help="flag for what data type to use for vegetation maps")

p.add_argument('-nl','--nlcd', dest='landfire',required=False, action="store_true",
                help="flag for what data type to use for vegetation maps")

p.add_argument('-d','--download', dest='download',required=False, default='~/Downloads',
                help="Location to check for veg data or download vegetation data")

p.add_argument('-o','--output', dest='output',required=False, default='./output',
                help="Location to output data")

args = p.parse_args()

msg = "SMRF Basin Setup"

print("="*len(msg))
print("SMRF Basin Setup")
print("="*len(msg))

#==================== Check Inputs ======================= #
for f in [args.basin_shapefile,args.dem]:
    if not os.path.isfile(f):
        raise IOError("Path does not exist.\n %s" % f)

if os.path.isdir(os.path.abspath(args.output)):
    print("\nWARNING: Output folder exists, potential to overwrite files!")
else:
    print("\nMaking output folder...")
    os.mkdir(os.path.abspath(args.output))

if os.path.isdir(os.path.abspath(os.path.expanduser(args.download))):
    download_f = os.path.abspath(os.path.expanduser(args.download))
else:
    raise IOError("Path to vegetation data/download directory does not exist.\n %s" % args.download)

#====================Downloads======================= #
url_dict = {"landfire":['https://www.landfire.gov/bulk/downloadfile.php?FNAME=US_140_mosaic-US_140EVT_04252017.zip&TYPE=landfire',
                        'https://www.landfire.gov/bulk/downloadfile.php?FNAME=US_140_mosaic-US_140EVH_12052016.zip&TYPE=landfire'],
            "nlcd":['http://www.landfire.gov/bulk/downloadfile.php?TYPE=nlcd2011&FNAME=nlcd_2011_landcover_2011_edition_2014_10_10.zip']}

#Expected directory names post download
f_dict = {"landfire":['US_140EVH_12052016','US_140EVT_04252017'],
          "nlcd":['nlcd_2011_landcover_2011_edition_2014_10_10']}

#Use the landfire data set
if args.landfire:
    name='landfire'
else:
    name = 'nlcd'

#Check to see if the data has been unzipped
print("\nChecking for {0} data in {1}...".format(name, download_f))

#Cycle through all the downloads
for i,f in enumerate(f_dict[name]):
    print("\nLooking for: \n%s " % os.path.join(download_f,f))
    if not os.path.isdir(os.path.join(download_f,f)):

        #missing downloaded data
        print("\nUnzipped folder not found, check for zipped folder.")
        print("Looking for:\n %s" % os.path.join(download_f,f)+'.zip')
        if not os.path.isfile(os.path.join(download_f,f)+'.zip'):

            #Zip file does not exist
            print("\nNo data found!\nDownloading %s ..." % f)
            print("This could take up to 20mins, so sit back and relax.")
            download_zipped_url(url_dict[name][i])

        #Downloaded but not zipped
        else:
            print("\nZipped data found, unzipping...")
            z = zipfile.ZipFile(os.path.join(download_f,f)+'.zip')
            z.extractall(download_f)
    else:
        print("\n%s found!" % f)

#==================== Processing ======================= #
os.mkdir(os.path.join(args.output,"temp")) #Make a workspace folder and then remove it.
TEMP = os.path.join(args.output,"temp")

print("\nGetting DEM data info...")
dem_info = check_output(['gdalinfo',args.dem])

#Interchange file
if args.basin_shapefile.split('.')[-1] == 'e00':
    print("\nConverting E00 to shp...")
    shp_out = args.output
    check_output(['ogr2ogr',args.basin_shapefile.split('.')[0],args.basin_shapefile)
